name: Build Kernel
run-name: >-
  ${{ format('Build Kernel for {0}', 
    github.event.inputs.ROM != '' && github.event.inputs.ROM || 'AOSP+MIUI'
  ) }}

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      kernel_branch:
        description: 'Select kernel branch (blank for all)'
        required: false
        default: ''
        type: choice
        options:
          - ''
          - munch
          - munch_susfs
          - sukisu_susfs
      ROM:
        description: 'ROM Type (MIUI, AOSP, or leave blank for both)'
        default: ''
        required: false
        type: choice
        options:
          - AOSP
          - MIUI
          - ''
      kpm:
        description: 'KPM'
        required: true
        default: false
        type: boolean
      clang:
        description: 'Clang option'
        required: true
        default: 'WeebX Stable 19.1.5'
        type: choice
        options:
          - 'ZyC Stable 16.0.6'
          - 'WeebX Stable 19.1.5'
          - 'WeebX Stable 20.0.0git'
          - 'Custom Clang'
      custom_clang_url:
        description: 'Custom Clang URL (required only if Custom Clang selected)'
        required: false
        default: ''
      use_release:
        description: |
          Do you want to create a GitHub Release?

          ⚠️ Note: Set the Release Title and Notes in release_config.txt  
        required: false  
        default: false  
        type: boolean  
      release_tag:  
        description: 'Release tag (e.g., v18.2-Artful)'  
        required: true  
        default: 'Kernel_Release'  
        type: string  
      prerelease:  
        description: 'Mark release as a prerelease'  
        required: false  
        default: false  
        type: boolean  
      draft:  
        description: 'Mark release as a draft'  
        required: false  
        default: false  
        type: boolean

  workflow_call:
    inputs:
      kernel_branch:
        description: 'Select kernel branch'
        required: true
        type: string
      ROM:
        description: 'ROM Type (MIUI/AOSP)'
        required: true
        type: string
      kpm:
        description: 'KPM'
        required: true
        type: boolean
      clang:
        description: 'Clang option'
        required: true
        type: string
      release_tag:
        description: 'Release tag'
        required: false
        type: string

jobs:
  set-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set.outputs.matrix }}
      build_start_time: ${{ steps.set.outputs.BUILD_START_TIME }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install jq
        run: sudo apt-get install -y jq
      
      - id: set
        run: |
          BUILD_START_TIME=$(date --iso-8601=seconds)
          echo "BUILD_START_TIME=$BUILD_START_TIME" >> $GITHUB_ENV
          echo "BUILD_START_TIME=$BUILD_START_TIME" >> $GITHUB_OUTPUT
          
          # Handle ROM selection
          ROM="${{ github.event.inputs.ROM }}"
          if [[ "$ROM" == "AOSP" ]]; then
            ROM_ARRAY=("AOSP")
          elif [[ "$ROM" == "MIUI" ]]; then
            ROM_ARRAY=("MIUI")
          else
            ROM_ARRAY=("AOSP" "MIUI")
          fi

          # Handle kernel branch selection
          BRANCH="${{ github.event.inputs.kernel_branch }}"
          if [[ -z "$BRANCH" ]]; then
            echo "Fetching all branches from kernel repo..."
            # Get branches into array
            readarray -t BRANCH_ARRAY < <(git ls-remote --heads https://github.com/UdayKumarChunduru/Realking_kernel_sm8250.git | awk -F'/' '{print $NF}')
            echo "Fetched branches: ${BRANCH_ARRAY[*]}"
          else
            BRANCH_ARRAY=("$BRANCH")
            echo "Selected branch: ${BRANCH_ARRAY[*]}"
          fi

          # Build matrix manually
          MATRIX='{"include":['
          first=true
          for rom in "${ROM_ARRAY[@]}"; do
            for branch in "${BRANCH_ARRAY[@]}"; do
              if [[ "$first" == "true" ]]; then
                first=false
              else
                MATRIX+=','
              fi
              MATRIX+="{\"rom_type\":\"$rom\",\"kernel_branch\":\"$branch\"}"
            done
          done
          MATRIX+=']}'

          echo "Generated matrix: $MATRIX"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  build:
    needs: set-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.set-matrix.outputs.matrix).include }}
    timeout-minutes: 120
    permissions:
      contents: write
      id-token: write
    env:
      CODENAME: munch
      KERNEL_SOURCE_URL: https://github.com/UdayKumarChunduru/Realking_kernel_sm8250.git
      KERNEL_BRANCH: ${{ matrix.kernel_branch }}
      clang: ${{ inputs.clang || github.event.inputs.clang || 'WeebX Stable' }}
      custom_clang_url: ${{ inputs.custom_clang_url || github.event.inputs.custom_clang_url || '' }}
      kpm: ${{ inputs.kpm || github.event.inputs.kpm || false }}
      use_release: ${{ inputs.use_release || github.event.inputs.use_release || false }}
      release_tag: ${{ inputs.release_tag || github.event.inputs.release_tag || 'Kernel_Release' }}
      release_title: ${{ inputs.release_title || github.event.inputs.release_title || 'RealKing Kernel' }}
      prerelease: ${{ inputs.prerelease || github.event.inputs.prerelease || false }}
      draft: ${{ inputs.draft || github.event.inputs.draft || false }}
      TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
      TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          
      - name: Install Python dependencies
        run: pip3 install requests

      - name: Start Telegram Timer Service
        id: start-timer
        env:
          ROM_TYPE: ${{ matrix.rom_type }}
          KERNEL_BRANCH: ${{ matrix.kernel_branch }}
        run: |
          echo "Starting Telegram timer service for ${{ matrix.rom_type }} (${{ matrix.kernel_branch }})"
          python3 tg_timer_service.py start &
          TIMER_PID=$!
          echo "TIMER_PID=$TIMER_PID" >> $GITHUB_ENV
          sleep 3

      - name: Initialize Build
        env:
          ROM_TYPE: ${{ matrix.rom_type }}
          KERNEL_BRANCH: ${{ matrix.kernel_branch }}
          CURRENT_STAGE: Initializing
          PROGRESS_PERCENT: 5
        run: |
          python3 -c "
          from tg_timer_service import update_stage
          update_stage('Initializing Build', '5')
          "

      - name: Clone Kernel Source  
        env:  
          ROM_TYPE: ${{ matrix.rom_type }}  
          KERNEL_BRANCH: ${{ matrix.kernel_branch }}
        id: kernel-source  
        run: |  
          python3 -c "
          from tg_timer_service import update_stage
          update_stage('Cloning Kernel Source', '10')
          "
          echo "Cloning branch $KERNEL_BRANCH"  
          git clone --depth=1 --branch "$KERNEL_BRANCH" "$KERNEL_SOURCE_URL" Kernel  

      - name: Process Release Configs  
        id: release-config  
        env:  
          ROM_TYPE: ${{ matrix.rom_type }}  
          KERNEL_BRANCH: ${{ matrix.kernel_branch }}
        run: |  
          python3 -c "
          from tg_timer_service import update_stage
          update_stage('Processing Release Configs', '20')
          "
          echo "📦 Processing release Config..."  
          RELEASE_TAG="${{ env.release_tag }}"  

          # Release Title  
          release_title=$(grep -v '^#' release_config.txt | head -n 1 | sed "s/\\\$release_tag/$RELEASE_TAG/g")  
          echo "release_title=$release_title" >> $GITHUB_ENV  

          # Release Notes  
          awk '!/^#/ {  
            if (!seen++) next  
            print  
          }' release_config.txt | sed "s/\\\$release_tag/$RELEASE_TAG/g" > final_release_notes.txt  

          echo "✅ Release title and notes processed!"  

      - name: Selected Options  
        id: print-options  
        env:  
          ROM_TYPE: ${{ matrix.rom_type }}  
          KERNEL_BRANCH: ${{ matrix.kernel_branch }}
        run: |  
          python3 -c "
          from tg_timer_service import update_stage
          update_stage('Printing Selected Options', '30')
          "
          echo "=============================================="  
          echo "           BUILD CONFIGURATION"  
          echo "=============================================="  
          echo "📱 Device Codename: $CODENAME"  
          echo "📦 ROM Type: ${{ matrix.rom_type }}"  
          echo "🌿 Kernel Branch: ${{ matrix.kernel_branch }}"  
          echo "🔧 Clang Version: $clang"  
          echo "🔐 SukiSU + KPM: $kpm"  
          echo "🚀 Release: $use_release"  
          echo "🏷️ Release Tag: $release_tag"  
          echo "🔖 Release Title: $release_title"  
          echo "📝 Release Notes:"  
          echo "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯"  
          cat final_release_notes.txt  
          echo "_______________________________________________"  
          echo "🚧 Pre Release: $prerelease"  
          echo "📃 Draft: $draft"  
          echo ""  

          echo "🔐 SukiSU + Kernel Patch Manager $( [[ "$kpm" == "true" ]] && echo ENABLED || echo DISABLED )"  

      - name: Set up environment  
        id: setup-env  
        env:  
          ROM_TYPE: ${{ matrix.rom_type }}  
          KERNEL_BRANCH: ${{ matrix.kernel_branch }}
        working-directory: Kernel  
        run: |  
          python3 ${{ github.workspace }}/tg_timer_service.py update "Setting Up Environment" "40"
          echo "🛠️ Setting up build environment..."  
          sudo apt-get update  
          sudo apt-get install -y --install-recommends jq python3 software-properties-common build-essential libelf-dev libhiredis1.1.0  

          # Setup time variables  
          TIME="$(date "+%Y%m%d%H%M")"  
          CURRENT_DATE=$(date +"%Y-%m-%d")  
          echo "TIME=$TIME" >> $GITHUB_ENV  
          echo "CURRENT_DATE=$CURRENT_DATE" >> $GITHUB_ENV  

          # Kernel zip filename  
          BRANCH_PART=$(echo "$KERNEL_BRANCH" | grep -oi 'susfs' || true | tr '[:upper:]' '[:lower:]')  
          KPM_PART=$([[ "$kpm" == "true" ]] && echo "kpm" || true)  

          ZIP_NAME_BASE="RealKing${BRANCH_PART:+-$BRANCH_PART}${KPM_PART:+-$KPM_PART}-$CODENAME"  

          echo "📦 Final ZIP name base: $ZIP_NAME_BASE"  
          echo "ZIP_NAME_BASE=$ZIP_NAME_BASE" >> $GITHUB_ENV  

          echo "⬇️ Downloading Clang: ${{ env.clang }}"  

          if [[ "${{ env.clang }}" == "Custom Clang" ]]; then  
            if [[ -z "${{ env.custom_clang_url }}" ]]; then  
              echo "❌ Error: You selected 'Custom Clang' but didn't provide a URL!"  
              exit 1  
            fi  
            CLANG_URL="${{ env.custom_clang_url }}"  
            echo "🌐 Custom Clang URL provided: $CLANG_URL"  
          else  
            if [[ "${{ env.clang }}" == "ZyC Stable 16.0.6" ]]; then  
              CLANG_URL=$(curl -s https://raw.githubusercontent.com/v3kt0r-87/Clang-Stable/main/clang-zyc.txt)  
            elif [[ "${{ env.clang }}" == "WeebX Stable 19.1.5" ]]; then  
              CLANG_URL=$(curl -s https://raw.githubusercontent.com/v3kt0r-87/Clang-Stable/main/clang-weebx.txt)  
            elif [[ "${{ env.clang }}" == "WeebX Stable 20.0.0git" ]]; then  
              CLANG_URL=$(curl -s https://raw.githubusercontent.com/XSans0/WeebX-Clang/main/main/link.txt)  
            else  
              echo "⚠️ Unknown Clang option selected! Falling back to WeebX Stable 19.1.5"  
              CLANG_URL=$(curl -s https://raw.githubusercontent.com/v3kt0r-87/Clang-Stable/main/clang-weebx.txt)  
            fi  
            echo "📥 Resolved Clang URL: $CLANG_URL"  
          fi  

          # Proceed with download and extraction  
          if [[ "$CLANG_URL" == *.tar.gz ]]; then  
            echo "📦 Downloading and extracting .tar.gz archive..."  
            wget --progress=bar:force "$CLANG_URL" -O "clang.tar.gz"  
            mkdir -p clang  
            tar -xvf clang.tar.gz -C clang  
            rm -rf clang.tar.gz  
          elif [[ "$CLANG_URL" == *.tar.zst ]]; then  
            echo "📦 Downloading and extracting .tar.zst archive..."  
            wget --progress=bar:force "$CLANG_URL" -O "clang.tar.zst"  
            mkdir -p clang  
            unzstd -d clang.tar.zst  
            tar -xvf clang.tar -C clang  
            rm -rf clang.tar clang.tar.zst  
          else  
            echo "❌ Unsupported archive type or missing file extension in URL: $CLANG_URL"  
            exit 1  
          fi  

          echo "✅ ${{ env.clang }} Clang downloaded and extracted successfully"  

          echo "Settingup Kernel Manager"  
          bash managerpatch.sh  

      - name: Build Kernel for ${{ matrix.rom_type }} (${{ matrix.kernel_branch }})  
        id: build-kernel  
        working-directory: Kernel  
        env:  
          ROM_TYPE: ${{ matrix.rom_type }}  
          KERNEL_BRANCH: ${{ matrix.kernel_branch }}
        run: |  
          python3 ${{ github.workspace }}/tg_timer_service.py update "Building Kernel" "60"
          echo "=============================================="  
          echo "           BUILDING ${{ matrix.rom_type }} KERNEL (${{ matrix.kernel_branch }})"  
          echo "=============================================="  

          ROM_TYPE_LOWER=$(echo "${{ matrix.rom_type }}" | tr '[:upper:]' '[:lower:]')  
          export ROM_TYPE="$ROM_TYPE_LOWER"  
          export kpm="${{ env.kpm }}"  
          export ZIP_NAME_BASE="$ZIP_NAME_BASE"  
          export TIME="$TIME"  
          chmod +x ${{ github.workspace }}/build.sh  

          bash ${{ github.workspace }}/build.sh  

      - name: Capture build outputs  
        env:  
          ROM_TYPE: ${{ matrix.rom_type }}  
          KERNEL_BRANCH: ${{ matrix.kernel_branch }}
        run: |  
          python3 ${{ github.workspace }}/tg_timer_service.py update "Capturing Build Outputs" "80"
          echo "📥 Capturing build outputs for ${{ matrix.rom_type }} (${{ matrix.kernel_branch }})..."  
          if [ -f "${{ github.workspace }}/output_${{ matrix.rom_type }}_${{ matrix.kernel_branch }}.txt" ]; then  
            cat "${{ github.workspace }}/output_${{ matrix.rom_type }}_${{ matrix.kernel_branch }}.txt" >> $GITHUB_OUTPUT  
            echo "✅ Outputs captured for ${{ matrix.rom_type }} (${{ matrix.kernel_branch }})"  
          else  
            echo "⚠️ No output file found for ${{ matrix.rom_type }} (${{ matrix.kernel_branch }})"  
          fi  
          
      - name: Upload Artifacts to Github  
        env:  
          ROM_TYPE: ${{ matrix.rom_type }}  
          KERNEL_BRANCH: ${{ matrix.kernel_branch }}
        run: |
          python3 ${{ github.workspace }}/tg_timer_service.py update "Uploading Artifacts" "90"

      - name: Upload ${{ matrix.rom_type }} (${{ matrix.kernel_branch }}) Artifact  
        id: upload-artifact  
        if: ${{ always() }}  
        uses: actions/upload-artifact@v4  
        with:  
          name: ${{ env[format('ZIP_NAME_{0}_{1}', matrix.rom_type, matrix.kernel_branch)] }}  
          path: ${{ env[format('ZIP_PATH_{0}_{1}', matrix.rom_type, matrix.kernel_branch)] }}  
          if-no-files-found: error  
          retention-days: 7  

      - name: Build Summary and GitHub Release  
        id: build-github-release  
        if: ${{ always() && env.use_release == 'true' && (github.event_name == 'workflow_dispatch' || github.event_name == 'workflow_call') }}  
        run: |  
          python3 ${{ github.workspace }}/tg_timer_service.py update "Creating GitHub Release" "95"
          echo "=============================================="  
          echo "           BUILD SUMMARY"  
          echo "=============================================="  
          echo "✅ Build process completed!"  
          echo ""  

          # Get the correct ZIP path for this matrix job  
          ZIP_PATH_VAR="ZIP_PATH_${{ matrix.rom_type }}_${{ matrix.kernel_branch }}"  
          ZIP_PATH="${!ZIP_PATH_VAR}"  

          export CURRENT_RUN_ID="${{ github.run_id }}"  
          echo "Workflow Run ID: ${{ github.run_id }}"  

          RELEASE_FILES=()  

          echo "📊 Build Results:"  
          if [[ -f "$ZIP_PATH" ]]; then  
            echo "✔️ ${{ matrix.rom_type }} Kernel (${{ matrix.kernel_branch }}): SUCCESS"  
            RELEASE_FILES+=("$ZIP_PATH")  
            echo "GitHub Releases (zip files only)"  
            echo ""  
            echo "📦 Preparing GitHub Release..."  

            # Verify files actually exist before creating release  
            VALID_FILES=()  
            for file in "${RELEASE_FILES[@]}"; do  
              if [ -f "$file" ]; then  
                VALID_FILES+=("$file")  
                echo "✅ Added to release: $(basename "$file")"  
              else  
                echo "❌ File not found: $(basename "$file")"  
              fi  
            done  

            if [ ${#VALID_FILES[@]} -eq 0 ]; then  
              echo "❌ No valid build files found for release"  
              exit 1  
            fi  

            echo "Release Tag: $release_tag"  
            echo "Release Title: $release_title"  
            echo -e "📋 Files to include in release:"  
            printf "%s\n" "${VALID_FILES[@]}"  

            # Check if release already exists from a different workflow run  
            if gh release view "$release_tag" >/dev/null 2>&1; then  
              # Check if this release was created in the current workflow run  
              RELEASE_BODY=$(gh release view "$release_tag" --json body -q .body)  

              if [[ "$RELEASE_BODY" == *"Workflow Run ID: $CURRENT_RUN_ID"* ]]; then  
                echo "📦 Adding files to existing release from current workflow..."  
                gh release upload "$release_tag" "${VALID_FILES[@]}" --clobber  
              else  
                echo "❌ Release tag '$release_tag' already exists from a previous run!"  
                echo "❌ Use a different release tag for new builds."  
                exit 1  
              fi  
            else  
              echo "📦 Creating new release..."  
              echo -e "\n\n<!-- Workflow Run ID: ${{ github.run_id }} -->" >> final_release_notes.txt  
              gh release create "$release_tag" \  
                --title "$release_title" \  
                --notes-file final_release_notes.txt \  
                --prerelease=$prerelease \  
                --draft=$draft \  
                "${VALID_FILES[@]}"  
            fi  

            FULL_NAME=$(curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/users/$GITHUB_ACTOR | jq -r '.name // empty')  
            echo "🙋 Uploader: ${FULL_NAME:+$FULL_NAME }@$GITHUB_ACTOR"  

            RELEASE_ID=$(gh api repos/${{ github.repository }}/releases/tags/$release_tag --jq '.id')  
            echo "🆔 GitHub Release ID: $RELEASE_ID"  

            echo "📌 Commit SHA: ${GITHUB_SHA::7}"  

            echo "✅ GitHub Release created successfully!"  
          else  
            echo "❌ ${{ matrix.rom_type }} Kernel (${{ matrix.kernel_branch }}): FAILED"  
            echo "❌ No release created (build failed)"  
          fi  

      - name: Finalize Telegram Notification  
        if: always()  
        env:  
          ROM_TYPE: ${{ matrix.rom_type }}  
          KERNEL_BRANCH: ${{ matrix.kernel_branch }}
          BUILD_STATUS: ${{ job.status }}  
          ZIP_PATH: ${{ env[format('ZIP_PATH_{0}_{1}', matrix.rom_type, matrix.kernel_branch)] }}  
        run: |  
          python3 tg_timer_service.py end ${{ job.status }}

      - name: Cleanup Timer Service
        if: always()
        run: |
          # Kill any remaining timer processes
          pkill -f "python3 tg_timer_service.py" || true
